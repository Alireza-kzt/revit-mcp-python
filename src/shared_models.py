from pydantic import BaseModel, Field, validator
from typing import List, Tuple, Optional

class PointModel(BaseModel):
    """Represents a 3D point."""
    x: float = Field(..., description="X-coordinate")
    y: float = Field(..., description="Y-coordinate")
    z: float = Field(default=0.0, description="Z-coordinate, defaults to 0.0")

    def to_list(self) -> List[float]:
        return [self.x, self.y, self.z]

class WallModel(BaseModel):
    """Defines a wall to be created."""
    start_point: PointModel = Field(..., description="Start point of the wall's baseline.")
    end_point: PointModel = Field(..., description="End point of the wall's baseline.")
    height: float = Field(default=3.0, description="Height of the wall in Revit's internal units (typically feet).")
    level_name: str = Field(default="Level 1", description="Name of the Revit level on which the wall is based.")
    # thickness: Optional[float] = Field(default=None, description="Optional thickness of the wall.")
    wall_id: Optional[str] = Field(default=None, description="Unique identifier for the wall, can be set by user or system.")


class RoomModel(BaseModel):
    """Defines a room to be created, conceptually as a rectangle for now."""
    name: str = Field(..., description="Name of the room.")
    level_name: str = Field(default="Level 1", description="Name of the Revit level for the room.")
    # For simplicity, LLM provides center and dimensions. Orchestrator will calculate boundary points.
    center_x: float = Field(..., description="X-coordinate of the room's approximate center.")
    center_y: float = Field(..., description="Y-coordinate of the room's approximate center.")
    width: float = Field(..., description="Width of the room (along X-axis if not rotated).") # X-dimension
    length: float = Field(..., description="Length (or depth) of the room (along Y-axis if not rotated).") # Y-dimension
    room_id: Optional[str] = Field(default=None, description="Unique identifier for the room.")

    @validator('width', 'length')
    def dimensions_must_be_positive(cls, v):
        if v <= 0:
            raise ValueError("Room dimensions (width, length) must be positive.")
        return v

    def calculate_boundary_points_xy(self) -> List[List[float]]:
        """Calculates 2D corner points for a rectangular room based on center, width, and length."""
        half_w = self.width / 2
        half_l = self.length / 2

        # Define corners relative to center (x, y)
        # Assuming width is along X, length is along Y, not rotated for now
        # Order: bottom-left, bottom-right, top-right, top-left (counter-clockwise)
        return [
            [self.center_x - half_w, self.center_y - half_l], # Bottom-left
            [self.center_x + half_w, self.center_y - half_l], # Bottom-right
            [self.center_x + half_w, self.center_y + half_l], # Top-right
            [self.center_x - half_w, self.center_y + half_l], # Top-left
        ]


class DesignPlanModel(BaseModel):
    """
    Represents the overall architectural design plan, consisting of various elements.
    This model is expected to be generated by the DesignAgent (as JSON) and consumed by the OrchestratorAgent.
    """
    plan_description: str = Field(
        default="Conceptual architectural design plan.",
        description="A brief textual description of the overall design plan."
    )
    walls: List[WallModel] = Field(default_factory=list, description="List of walls in the design.")
    rooms: List[RoomModel] = Field(default_factory=list, description="List of rooms in the design.")
    # Future elements:
    # windows: List[WindowModel] = Field(default_factory=list)
    # doors: List[DoorModel] = Field(default_factory=list)

    class Config:
        schema_extra = {
            "example": {
                "plan_description": "A simple two-room cabin.",
                "walls": [
                    {
                        "start_point": {"x": 0, "y": 0, "z": 0},
                        "end_point": {"x": 10, "y": 0, "z": 0},
                        "height": 3.0,
                        "level_name": "Level 1",
                        "wall_id": "wall_south"
                    },
                    {
                        "start_point": {"x": 10, "y": 0, "z": 0},
                        "end_point": {"x": 10, "y": 5, "z": 0},
                        "height": 3.0,
                        "level_name": "Level 1",
                        "wall_id": "wall_east"
                    }
                ],
                "rooms": [
                    {
                        "name": "Living Area",
                        "level_name": "Level 1",
                        "center_x": 5,
                        "center_y": 2.5,
                        "width": 9,
                        "length": 4,
                        "room_id": "room_living"
                    }
                ]
            }
        }
```
