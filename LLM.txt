# Simple Revit MCP

## **Context** | 

 This is a context document for LLMs tasked with developing functionalities for the Simple Revit MCP. 

## **Terms**:
- **MCP**: The Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools.
- **pyRevit**:  Revit add-on that allows you to interact with the Revit environment and using its APIs using Python. Based on **IronPython** (which is an implementation of Python 2) to interact with the Revit API, as Revit's API is .NET based and IronPython runs on the .NET framework.
- **Routes Module**: "The new Routes python module, is an HTTP micro-framework to create web APIs running over Revit instances. This means that you can create functionality that could be triggerd from remote. This framework provides the necessary mechanism to create a back-end that has access to Revit context."
---
## **Routes Documentation** | pyRevit Routes HTTP API Documentation

**Overview**

# pyRevit Routes (HTTP API)

> **Note**: pyRevit Routes is a DRAFT and is subject to change. There is no authentication mechanism implemented yet.

pyRevit Routes is a fairly isolated module under `pyrevitlib/pyrevit/routes/` in pyRevit source. You are encouraged to dive into the code and contribute to the project without affecting the other parts of the pyRevit ecosystem.

## What is pyRevit Routes

Let's say we want to create a web application that would display a list of doors in a model. The web application would be split into two parts:

- **Front-end**: the part that runs in the browser and acts as the user interface, and
- **Back-end**: the part that the front-end contacts to send and receive data

While you are free to select whatever toolchain and GUI framework (React, Vue.js, etc) you are comfortable with for the front-end, the challenge has always been on how to create a back-end that has access to Revit contexts and can query or modify Revit documents. What we really needed is to run a HTTP web server over a running Revit instance and manage the HTTP calls in a way that would be executed in Revit context.

The new Routes python module, is an HTTP micro-framework to create web APIs running over Revit instances. This means that you can create functionality that could be triggered from remote. This framework provides the necessary mechanism to create a back-end that has access to Revit context.

> **Fun fact**: The Runtime REST API is implemented using this framework

## Getting Started

Let's create a simple API using the routes module. One important note here is that it is better to place this API inside your extensions' startup script (`startup.py`) so it only runs once per Revit instance.

### Creating Custom HTTP API Extension

Let's create an empty extension that will define our new HTTP API:

```
MyExtensions/
    └── MyHTTPAPI.extension/
        └── startup.py
```

Note that the extension does not include anything else other than the `startup.py` script.

Now let's open the `startup.py` and import the routes module. This module provides the functionality we need to define the API:

```python
# first import the routes module
from pyrevit import routes
```

Then we need to define a new API...

### What is a Routes API

Routes API is very similar to a Flask App but at the same time is slightly different. Let's look at the structure of an API end point in pyRevit routes module:

```
http://machine-ip:server-port/routes-api/api-path/...
         └── 1      └── 2       └── 3      └── 4
```

- **machine-ip** is the IP of the machine running Revit and the Routes server
- **server-port** is the Routes server port
- **routes-api** is the name of API defined by you. Each program or extension can define their own APIs or extend other APIs as long as the routes do not conflict. This is basically the root path of all the endpoints defined in your Routes API
- **api-path/...** is specific routes define in your API e.g. `doors/`

So with that knowledge, we are going to define our new API. We are using `my-api` as the unique name of our custom API:

```python
api = routes.API('my-api')
```

## API Endpoints

Now that we have the API ready, we can define our API end points. To collect doors from an active Revit model, we would want to collect (HTTP method GET) and the `doors/` in active model using our custom API `my-api/`. So our API endpoint would look like this:

```
GET my-api/doors/
```

Let's define this endpoint. First we need to create a function that collects the doors in the model:

```python
def get_doors(doc):
    """Find doors in given model"""
    doors = DB.FilteredElementCollector(doc)\
              .OfCategory(DB.BuiltInCategory.OST_Doors)\
              .WhereElementIsNotElementType()\
              .ToElements()
```

Notice that we have included a `doc` argument for our function since we do not know what the active document would be when this function is being triggered by a HTTP request from outside. So we would need the routes module to provide us the active document as the `doc` argument. See sections below to learn about other predefined arguments that you can define for your logic functions and the implications of each.

Now that we have our logic function, let's tell the Routes module that this is the function we want to be triggered when an HTTP call is made to the `my-api/doors` end point that we have decided on. The `api` object we created, provides handy decorators to make this process very easy:

```python
@api.route('/doors/')     #<---- add decorator to the function
def get_doors(doc):
    """Find doors in active model"""
    doors = DB.FilteredElementCollector(doc)\
              .OfCategory(DB.BuiltInCategory.OST_Doors)\
              .WhereElementIsNotElementType()\
              .ToElements()
```

You might have noticed that we do not need to include the `my-api` part of the endpoint, since that's the root of our API and all the endpoints defined using `api.route` will end up after the API. So `@api.route('/doors/')` will mark the logic function for `my-api/doors` endpoint.

### Returning Results

Now that we have the logic connected to the endpoint, we can prepare the doors data we have collected as a Response to be sent back to the caller. Let's say we would want to return the Ids of the doors at this point:

```python
@api.route('/doors/')
def get_doors(doc):
    """Find doors in active model"""
    doors = DB.FilteredElementCollector(doc)\
              .OfCategory(DB.BuiltInCategory.OST_Doors)\
              .WhereElementIsNotElementType()\
              .ToElements()

    # let's grab the integer ids of the door instances
    doors_data = [x.Id.IntegerValue for x in doors]
```

and now we can use the routes module again to prepare a response:

```python
@api.route('/doors/')
def get_doors(doc):
    """Find doors in active model"""
    doors = DB.FilteredElementCollector(doc)\
              .OfCategory(DB.BuiltInCategory.OST_Doors)\
              .WhereElementIsNotElementType()\
              .ToElements()
    doors_data = [x.Id.IntegerValue for x in doors]

    # create response and return
    return routes.make_response(data=doors_data)
```

We are passing a python list (serializable data type) as the response data to the `routes.make_response()` function. This function has more arguments that you can read about in the sections below but for this example we use the defaults (e.g. HTTP response status defaults to 200 OK).

Well done. Our API endpoint is ready. Let's fire up Revit and the HTTP server now...

## Starting Up The Routes Server

Let's start Revit. The Routes server is disabled by default. After Revit is fully loaded, open pyRevit Settings, and under the Routes section, turn on the server.

The default port for the server is set to `48884`. The first instance of Revit will use the port `48884`, the next Revit instance will use `48885` and so on. See below for information about the pyRevit Routes Core API that could be used to inspect the running Revit instances and their port numbers remotely.

Now Restart Revit. This time Revit will run the `startup.py` in your extension and will attempt to start the Routes Server.

Your operating system might ask you if you want to allow the Routes server (now running inside Revit) to open a connection to the outside and start listening on the predefined port number.

Now that your Revit is fully loaded, and the pyRevit Routes server is also running and authorized to listen on the port, we can test our API endpoint:

1. First open a model that contains a few doors so our API endpoint has some data to return
2. Then go to a different machine on your network, open a browser and type this path in the address bar. Replace the `<machine-ip>` with the IP address of your machine that is running the Revit instance. You can see that in the Example provided under the Routes server status message in pyRevit settings

```
http://<machine-ip>:48884/my-api/doors/
```

You should be able to see a list of door Ids returned as a JSON list object.

## Advanced Routing

### Function Arguments

The predefined arguments listed here can be added to your handler functions if needed. The Routes server will set the appropriate value on these arguments if necessary.

- **request**: a `routes.Request` object will be passed as this argument that contains information about the request that triggered the execution
- **uiapp**: is a reference to the `UIApplication` object provided by Revit runtime
- **uidoc**: is a reference to the `UIDocument` object provided by Revit runtime
- **doc**: is a reference to the active `Document` object provided by Revit runtime

> **IMPORTANT NOTE**: if any of the `uiapp`, `uidoc`, or `doc` arguments are defined in your handler function, the Routes server will assume your handler function needs Revit API context and will execute your function as an External Event using the Revit API. This way your handler function can use transactions to make changes to the Revit document and is guaranteed to be the only function running in API context.

### Defining Routes

The `api.route` decorator can be used to create more complex routes:

#### Request Methods

You can pass the acceptable HTTP methods for your handler function to the decorator as shown below:

```python
@api.route('api/end/point/', methods=["GET", "POST"])
```

The `request` argument on your handler functions can be used to check which HTTP method is being called on the endpoint:

```python
@api.route('api/end/point/method', methods=["GET", "POST"])
def test_method(request):
    if request.method == "POST":
        # do post stuff
    else:
        # do get stuff
```

#### Route Parameters

You can define a series of parameters to be extracted from the endpoint path and passed to the handler function.

Define the parameter following the `/<type:name>/` format e.g. `/<int:door_id>/` in the example below:

```python
# /doors/12
# /doors/2313

@api.route('/doors/<int:door_id>')
def post_id(door_id):
    # do stuff with door_id
```

A few other data types are supported as well (`int`, `float`, `double`, `bool`, `uuid`):

```python
api.route('/doors/<uuid:door_uniqueid>')
def post_uuid(door_uniqueid):
    # do stuff with door_uniqueid
```

#### Request Data

The `request` argument on your handler functions can be used to grab any data being passed to the endpoint:

```python
@api.route('api/end/point/data', methods=["POST"])
def test_data(request):
    if request.data:
        # process data
```

#### Request Headers

The `request` argument on your handler functions can be used to grab request headers:

```python
@api.route('api/end/point/headers', methods=["POST"])
def test_headers(request):
    headers = request.headers  # dictionary of header key:value
```

### Returning Results

The `routes.make_response` function can be used to prepare a `routes.Response` object:

```python
@api.route('api/end/point/response', methods=["POST"])
def mirror(request):
    return routes.make_response(
        data=request.data,
        status=routes.HTTP_OK,
        headers={"pyRevit": "v4.6.7"}
    )
```

### Providing Callback URL

API calls to the Routes server can provide a callback URL when the endpoint handler is going to take a lot of time to complete the work. Include the `callbackUrl` in the data sent by the HTTP request:

```json
{
    // your data,
    "callbackUrl": "http://mycallbackserver/api/end/point/callback"
}
```

If callback URL is provided, the server will immediately accept the request and will send back status `204 NO_CONTENT`.

When the handler function completes the work, the Routes server will make a POST call to the callback URL and will provide the results of the handler function.

### Exceptions

The Routes server will provide information about any exceptions that occur when running your handler function:

```json
{
    "exception": {
        "source": "Autodesk Revit 2019.2 build: 20190808_0900(x64)",
        "message": "ZeroDivisionError: Attempted to divide by zero.\n  File \"...\""
    }
}
```

## pyRevit Routes Core API

pyRevit Routes defines its own core API to help you test the status of the running instances of the Routes server on the target machine. Note that at least one instance of Revit must be running to be able to receive and respond to these calls.

↓ See this page for more information about the `routes/` and `pyrevit-core/` APIs

## Server Configurations

### Configuring Starting Port Number

Use the pyRevit CLI to configure the starting port number for the Routes servers running on the host machine. First Revit instance will start with this number and other instances will continue up adding one for each instance e.g. `48884` → `48885` → `48886` → ... See Runtime REST API for methods to know about running Routes servers on a machine.

```bash
# read port number
$ pyrevit configs routes port
Routes Port: 48884

# set port number
$ pyrevit configs routes port <port-number>
```

Each new Revit instance uses the next available port number.

## pyRevit Core API

See Runtime REST API for pyRevit Core API that provides methods to manage the pyRevit environment itself. This API can be toggled using the pyRevit Settings window or the pyRevit CLI:

```bash
# read core api status
$ pyrevit configs coreapi
Routes Core API is disabled

# set core api status
$ pyrevit configs coreapi enable
$ pyrevit configs coreapi disable
```


## **This Repo** | 

A minimal and beginner-friendly implementation of the Model Context Protocol (MCP) for Autodesk Revit

- This minimal implementation leverages the Routes module inside pyRevit to create a bridge between Revit and Large Language Models (LLMs).

- It provides a straightforward template to get started quickly, letting you prototype and iterate tools to give LLMs access to your Revit models.

- These tools are designed to be expanded for your specific use cases. You're very welcome to fork the repo and make your own contributions.

-  **Note:** The pyRevit Routes API is currently in draft form and subject to change. It lacks built-in authentication mechanisms, so you'll need to implement your own security measures for production use.

This repo is aimed at:

- Beginners to the Revit API

- Python specialists who aren't versed in C#

- Anyone wanting to prototype and iterate quickly with LLMs and Revit

It contains:

- A complete Routes implementation for pyRevit

- A minimal MCP server script to connect to any MCP-compatible client

- Several test commands to get you started right away

---

**Initial Tools** | These are the basic initial tools this repo comes with. Your task is helping the user develop more tools for their specific use case: 

1.  **Model Information** - Get comprehensive information about the Revit model:

- Element counts by category (walls, doors, windows, etc.)

- Room names and locations

- Level information

  

2.  **Get View** - Capture any Revit view for the LLM:

- Export views as PNG images

- Allow the model to view the image directly

  

3.  **Family Placement** - Add elements to the Revit model:

- Place family instances at specific coordinates

- Set rotation and orientation

- Apply custom properties to the placed elements

## **Writing New Functions** | 

What makes this implementation special is how easy it is to create new endpoints:

1.  **Define a Routes API endpoint in `startup.py`:**

```python
@api.route('/function/', methods=["GET"])
def some_function():
    # Access the current Revit document
    doc = revit.doc
    # Your Revit API logic here
    value = some_action(doc)
    return routes.make_response(data=value)

```

2.  **Create a corresponding MCP tool in `main.py`:**

```python
@mcp.tool()
async def execute_function() -> str:
    """
    Description of what this tool does
    """
    try:
        url = f"{BASE_URL}/function/"
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            if response.status_code == 200:
                return response.json()
            else:
                return f"Error: {response.status_code}"
    except Exception as e:
        return f"Error: {str(e)}"

```

### Creating Actions in the Model


For operations that modify the model, use POST requests with JSON payloads:

python

```python
# In startup.py
@api.route('/modify_model/', methods=["POST"])
def modify_model(doc, request):
    """Handle POST requests - for modifying the Revit model"""
    try:
        # Parse request data
        data = json.loads(request.data) if isinstance(request.data, str) else request.data
        
        # Extract parameters from the request
        operation_type = data.get("operation")
        parameters = data.get("parameters", {})
        
        # Use transaction context manager for automatic commit/rollback
        with DB.Transaction(doc, "Modify Model via MCP") as t:
            t.Start()
            
            # Your Revit API logic to modify the model
            result = perform_modification(doc, operation_type, parameters)
            
            # Transaction will automatically commit when exiting the 'with' block
            # or rollback if an exception occurs
            
        return routes.make_response(data={
            "status": "success",
            "result": result
        })
        
    except Exception as e:
        return routes.make_response(
            data={"error": str(e)},
            status=500
        )
```

```python
# In main.py
@mcp.tool()
async def modify_model(
    operation: str,
    parameters: Dict[str, Any],
    ctx: Context = None
) -> str:
    """
    Modify the Revit model based on specified operation and parameters
    
    Args:
        operation: The type of modification to perform
        parameters: Dictionary containing operation-specific parameters
        ctx: MCP context for logging
        
    Returns:
        Success message with operation details or error information
    """
    try:
        data = {
            "operation": operation,
            "parameters": parameters
        }
        
        url = f"{BASE_URL}/modify_model/"
        ctx.info(f"Performing operation: {operation}")
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                url,
                json=data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                ctx.info("Operation completed successfully")
                return result
            else:
                error_msg = f"Error: {response.status_code} - {response.text}"
                ctx.error(error_msg)
                return error_msg
                
    except Exception as e:
        error_msg = f"Error connecting to Revit: {str(e)}"
        ctx.error(error_msg)
        return error_msg
```